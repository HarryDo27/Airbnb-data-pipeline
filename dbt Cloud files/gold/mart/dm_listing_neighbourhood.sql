{{
    config(
        alias='DM_LISTING_NEIGHBOURHOOD'
    )
}}

WITH SOURCE AS (
    SELECT
        DL.LISTING_NEIGHBOURHOOD,
        TO_CHAR(CAST(dh.SCRAPED_DATE AS DATE), 'MM-YYYY') AS MONTH_YEAR,
        F.LISTING_ID,
        F.PRICE,
        F.AVAILABILITY_30,
        F.NUMBER_OF_REVIEWS,
        F.REVIEW_SCORES_RATING,
        F.HOST_ID,
        DH.HOST_IS_SUPERHOST,
        DL.HAS_AVAILABILITY
    FROM {{ ref('g_fact_listing') }} F
    LEFT JOIN {{ ref('g_dim_property') }} DL ON F.LISTING_ID = DL.LISTING_ID
    LEFT JOIN {{ ref('g_dim_host') }} DH ON F.HOST_ID = DH.HOST_ID
),

AGGREGATED AS (
    SELECT
        LISTING_NEIGHBOURHOOD,
        MONTH_YEAR,
        COUNT(CASE WHEN HAS_AVAILABILITY = TRUE THEN LISTING_ID END) AS ACTIVE_LISTINGS,
        COUNT(LISTING_ID) AS TOTAL_LISTINGS,
        COUNT(DISTINCT HOST_ID) AS NUMBER_OF_DISTINCT_HOSTS,
        COUNT(DISTINCT CASE WHEN HOST_IS_SUPERHOST = TRUE THEN HOST_ID END) AS SUPERHOST_COUNT,
        MIN(CASE WHEN HAS_AVAILABILITY = TRUE THEN PRICE ELSE NULL END) AS MIN_PRICE_ACTIVE,
        MAX(CASE WHEN HAS_AVAILABILITY = TRUE THEN PRICE ELSE NULL END) AS MAX_PRICE_ACTIVE,
        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CASE WHEN HAS_AVAILABILITY = TRUE THEN PRICE END) AS MEDIAN_PRICE_ACTIVE,
        AVG(CASE WHEN HAS_AVAILABILITY = TRUE THEN PRICE ELSE NULL END) AS AVG_PRICE_ACTIVE,
        AVG(CASE WHEN HAS_AVAILABILITY = TRUE THEN REVIEW_SCORES_RATING ELSE NULL END) AS AVG_REVIEW_SCORE_RATING,
        SUM(CASE WHEN HAS_AVAILABILITY = TRUE THEN (30 - AVAILABILITY_30) ELSE 0 END) AS TOTAL_NUMBER_OF_STAYS,
        SUM(CASE WHEN HAS_AVAILABILITY = TRUE THEN (30 - AVAILABILITY_30) * PRICE ELSE 0 END) AS TOTAL_ESTIMATED_REVENUE_ACTIVE
    FROM SOURCE
    GROUP BY LISTING_NEIGHBOURHOOD, MONTH_YEAR
),

CHANGES AS (
    SELECT
        LISTING_NEIGHBOURHOOD,
        MONTH_YEAR,
        ACTIVE_LISTINGS,
        LAG(ACTIVE_LISTINGS) OVER (PARTITION BY LISTING_NEIGHBOURHOOD ORDER BY MONTH_YEAR) AS PREVIOUS_ACTIVE_COUNT,
        TOTAL_LISTINGS,
        TOTAL_ESTIMATED_REVENUE_ACTIVE,
        MIN_PRICE_ACTIVE,
        MAX_PRICE_ACTIVE,
        MEDIAN_PRICE_ACTIVE,
        AVG_PRICE_ACTIVE,
        NUMBER_OF_DISTINCT_HOSTS,
        SUPERHOST_COUNT,
        AVG_REVIEW_SCORE_RATING,
        TOTAL_NUMBER_OF_STAYS
    FROM AGGREGATED
)

SELECT
    LISTING_NEIGHBOURHOOD,
    MONTH_YEAR,
    (ACTIVE_LISTINGS::NUMERIC / NULLIF(TOTAL_LISTINGS, 0)) * 100 AS ACTIVE_LISTING_RATE,
    MIN_PRICE_ACTIVE,
    MAX_PRICE_ACTIVE,
    MEDIAN_PRICE_ACTIVE,
    AVG_PRICE_ACTIVE,
    NUMBER_OF_DISTINCT_HOSTS,
    (SUPERHOST_COUNT::NUMERIC / NULLIF(NUMBER_OF_DISTINCT_HOSTS, 0)) * 100 AS SUPERHOST_RATE,
    AVG_REVIEW_SCORE_RATING,
    CASE
        WHEN PREVIOUS_ACTIVE_COUNT IS NOT NULL AND PREVIOUS_ACTIVE_COUNT != 0 THEN
            ((ACTIVE_LISTINGS - PREVIOUS_ACTIVE_COUNT) / PREVIOUS_ACTIVE_COUNT::NUMERIC) * 100
        ELSE
            NULL
    END AS PERCENTAGE_CHANGE_ACTIVE,
    CASE
        WHEN TOTAL_LISTINGS IS NOT NULL THEN
            ((TOTAL_LISTINGS - ACTIVE_LISTINGS) / NULLIF(TOTAL_LISTINGS, 0) * 100)
        ELSE
            NULL
    END AS PERCENTAGE_CHANGE_INACTIVE,
    TOTAL_NUMBER_OF_STAYS,
    (TOTAL_ESTIMATED_REVENUE_ACTIVE::NUMERIC / NULLIF(ACTIVE_LISTINGS, 0)) AS AVG_ESTIMATED_REVENUE_PER_ACTIVE_LISTING
FROM CHANGES
ORDER BY LISTING_NEIGHBOURHOOD, MONTH_YEAR
